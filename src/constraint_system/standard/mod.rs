//! This module contains the `Composer` Trait definition.
//!
//! A `Composer` needs to satisfy some basic functions
//! which are independend on the kind of Composer that it is
//! intended to be:
//! - Provide circuit size.
//! - Preprocessing the circuit and return a `PreprocessedCircuit`
//! data structure which contains the circuit definition formed by
//! the selector polynomials.
//! - Prove generation using the `PreprocessedCircuit` which holds the
//! circuit description and the `Composer` data stored which will contain
//! the witness polynomials that the circuit has.
pub mod composer;
pub(crate) mod linearisation_poly;
mod preprocessed_circuit;
pub mod proof;
mod quotient_poly;

use crate::commitment_scheme::kzg10::ProverKey;
use crate::fft::EvaluationDomain;
use crate::transcript::TranscriptProtocol;

pub use composer::StandardComposer;
pub use preprocessed_circuit::PreProcessedCircuit;

/// Implementation of the standard PLONK proof system
pub trait Composer {
    /// Returns the number of gates that the circuit contains.
    fn circuit_size(&self) -> usize;
    /// Generates the Preprocessed Circuit for the circuit built
    /// by the Composer.
    fn preprocess(
        &mut self,
        commit_key: &ProverKey,
        transcript: &mut dyn TranscriptProtocol,
        domain: &EvaluationDomain,
    ) -> PreProcessedCircuit;
    /// Builds a `Proof` from a given `PreProcessed Circuit`,
    /// the witness polynomials stored in the `Composer`, the
    /// `Transcript` to perform the `Fiat-Shamir` and the
    /// `ProverKey` generated by the commitment scheme.
    fn prove(
        &mut self,
        commit_key: &ProverKey,
        preprocessed_circuit: &PreProcessedCircuit,
        transcript: &mut dyn TranscriptProtocol,
    ) -> proof::Proof;
}
